#!/usr/bin/perl
# -*- perl -*-
#
# sensors temp munin plugin.
#

=head1 NAME

sensors_ - Wildcard-plugin to monitor information from temperature, voltage,
	   and fan speed sensors.

=head1 CONFIGURATION

The plugins needs the following components configured: 

	- i2c and lm_sensors modules installed and loaded.
	- sensors program installed and in path.
 Note:
 	- Sensor names are read from the output of the sensors program.
 	  Change them in /etc/sensors.conf if you don't like them.

  [sensors_*]
      env.sensors 	    - Override default sensors program path
      env.ignore_temp<n>    - Temperature <n> will not be plotted

=head1 VERSION

$Id: sensors_temp,v 1.2 2011/07/16 11:45:55 yama Exp yama $

=head1 AUTHOR

Unknown author

=head1 LICENSE

Unknown license

=head1 MAGIC MARKERS

 #%# family=manual
 #%# capabilities=autoconf suggest

=cut

use strict;
use warnings;

$ENV{'LANG'} = "C"; # Force parseable output from sensors.
$ENV{'LC_ALL'} = "C"; # Force parseable output from sensors.
my $SENSORS = $ENV{'sensors'} || 'sensors';

# Example outputs from sensors & matching regex parts:

# Temperature output example from sensors:
# * Note that the iso-8859-1 degree character is not printed, as we are running
#   with LC_ALL=C & LANG=C.
# ---------------------------------------
# Sys Temp:    +41.0 C  (high = -128.0 C, hyst = +24.0 C)  ALARM  sensor = thermistor
# CPU Temp:    +40.5 C  (high = +80.0 C, hyst = +75.0 C)  sensor = thermistor
# AUX Temp:    +39.0 C  (high = +80.0 C, hyst = +75.0 C)  sensor = thermistor
# 
# ^^^^^^^^      ^^               ^^              ^^
#   $1          $2               $3              $4
# 
# ------------------------------------


my %config = (
    temp => {
        regex => qr/
            ^ # String must start with:
            (\S[^:]*)  # Match any non-whitespace char, except ':' 
                       # (Match label as \$1)
            \s*        # Zero or more spaces followed by 
            :          # ':' characheter
            \s*        # Zero or more spaces followed by
            \+?        # Zero or one '+' char followed by

            (-?        # Match zero or one '-' char  
            \d+        # Match one or more digits 
                       # (Match current value as \$2) followed by

            (?:\.\d+)?)# Zero or one match of '.' char followd by one or more
                       # digits. '?:' means it doesn't spit out the field.
            [-\s]      # Match degree char or space char
            C          # Match 'C' char

            (?:        # >>>>Match the following statement zero or one time. 
                       # '?:' means it doesn't spit out the field.
            \s+        # One or more space followed by
            \(         # '(' char
            (?:high|limit) # 'high' or 'limit' string.  
                           # '?:' means it doesn't spit out the field.
            \s*=\s*    # Match zero or more spaces and then '=' char and then
                       # zero or more spaces, followed by
            \+?        # Zero or one '+' char
            (\d+       # Match one or more digits 
                       # (Match high value as \$3) followed by  
            
            (?:\.\d+)?)# Zero or one match of '.' char followd by one or more
                       # digits. '?:' means it doesn't spit out the field.
            [-\s]      # Match degree char or space char
            C,\s*      # 'C,' string followd by zero or more spaces
            hyst       # 'hyst' string followed by
            (?:eresis)?# zero or one 'eresis' string. 
                       # '?:' means it doesn't spit out the field.
            \s*=\s*    # Match zero or more spaces and then '=' char and then 
                       # zero or more spaces, followed by
            \+?        # Zero or one '+' char
            (\d+       # Match one or more digits 
                       # (Match hyst value as \$4) followed by  
            (?:\.\d+)?)# Zero or one match of '.' char followd by one or more
                       # digits. '?:' means it doesn't spit out the field.
            [-\s]C     # Match degree char or space char, and then 'C' char
            \)         # ')' char
            )?         # >>>>end of statement
        /xms,
    title => 'Temperatures',
    vtitle => 'Celsius',
    print_threshold => \&temp_threshold,
    graph_args => '--base 1000 -l 0'
    },

);

if ( defined $ARGV[0] and $ARGV[0] eq 'autoconf' ) {
  # Now see if "sensors" can run
  my $text = `$SENSORS 2>/dev/null`;
  if ($?) {
    if ($? == -1) {
      print "no (program $SENSORS not found)\n";
    } else {
      print "no (program $SENSORS died)\n";
    }
    exit 0;
  }

  unless ($text =~ /[ー ]C/) {
    print "no (no temperature readings)\n";
    exit 0;
  }

  print "yes\n";
  exit 0;
}

if (defined $ARGV[0] and $ARGV[0] eq 'suggest') {
  my $text = `$SENSORS 2>/dev/null`;
  foreach my $func (keys %config) {
    print $func, "\n" if $text =~ $config{$func}->{regex};
  }
  exit;
}

$0 =~ /sensors_(.+)*$/;
my $func = $1;
exit 2 unless defined $func;

if ( defined $ARGV[0] and $ARGV[0] eq 'config' ) {
  print "graph_title $config{$func}->{title}\n";
  print "graph_vtitle $config{$func}->{vtitle}\n";
  print "graph_args $config{$func}->{graph_args}\n";
  print "graph_category sensors\n";
  my $text = `$SENSORS`;
  my $sensor = 2; # カウンターを2から開始。
  my %label_list;
  while ($text =~ /$config{$func}->{regex}/g) {
    my ($label, undef, $max, $min) = ($1, $2, $3, $4);
	# CPU を常に1番に。
	if ($label eq 'CPU') {
	    $sensor = 1;
	}
	# 表示順でグラフの色が決まるので結局出力順が大事に.
	# ハッシュに番号をキーにして格納。
	$label_list{$sensor} = "$func$sensor.label $label\n";
	$config{$func}->{print_threshold}->($func.$sensor, $3, $4);
	$label_list{$sensor} = $label_list{$sensor} .
		"$func$sensor.graph no\n" if exists $ENV{"ignore_$func$sensor"};
	$sensor++;
  }
  # ハッシュをソート。
  foreach my $ixx ( sort keys %label_list ) {
	  print "$label_list{$ixx}";
  }
  exit 0;
}

my $text = `$SENSORS`;
my $sensor = 2;
my %v_list;
while ($text =~ /$config{$func}->{regex}/g) {
	if ($1 eq 'CPU') {
	    $sensor = 1;
	}
  $v_list{$1} =  "$func$sensor.value $2\n";
  $sensor++;
}
# ハッシュキーでソートして出力。
foreach my $zz ( sort keys %v_list ) {
	print "$v_list{$zz}";
}





sub temp_threshold {
  my $name = shift;
  my $max = shift;
  my $min = shift;

  printf "$name.warning $min\n" if $min;
  printf "$name.critical $max\n" if $max;
}

# vim:syntax=perl
